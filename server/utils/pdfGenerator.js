const PDFDocument = require('pdfkit');

class PDFGenerator {
  constructor() {
    this.doc = null;
  }

  // Generate PDF report for lab results with enhanced error handling
  generatePDF(results, options = {}) {
    return new Promise((resolve, reject) => {
      try {
        // Input validation
        if (!Array.isArray(results)) {
          reject(new Error('Results must be an array'));
          return;
        }

        if (results.length === 0) {
          reject(new Error('No results provided for PDF generation'));
          return;
        }

        // Validate options
        if (options && typeof options !== 'object') {
          reject(new Error('Options must be an object'));
          return;
        }

        this.doc = new PDFDocument({
          size: 'A4',
          margin: 50,
          info: {
            Title: 'Labor Results Report',
            Author: 'Labor Results System',
            Subject: 'Laboratory Test Results',
            Keywords: 'laboratory, results, medical, LDT',
          }
        });

        const buffers = [];
        
        // Enhanced error handling for PDF generation
        this.doc.on('data', (chunk) => {
          try {
            if (chunk && chunk.length > 0) {
              buffers.push(chunk);
            }
          } catch (error) {
            console.error('Error processing PDF chunk:', error);
            reject(new Error('Failed to process PDF data'));
          }
        });

        this.doc.on('end', () => {
          try {
            if (buffers.length === 0) {
              reject(new Error('No PDF data generated'));
              return;
            }
            
            const pdfData = Buffer.concat(buffers);
            
            // Validate PDF size
            if (pdfData.length === 0) {
              reject(new Error('Generated PDF is empty'));
              return;
            }
            
            if (pdfData.length > 50 * 1024 * 1024) { // 50MB limit
              reject(new Error('Generated PDF is too large'));
              return;
            }
            
            resolve(pdfData);
          } catch (error) {
            reject(new Error(`Failed to finalize PDF: ${error.message}`));
          }
        });

        this.doc.on('error', (error) => {
          reject(new Error(`PDF generation error: ${error.message}`));
        });

        // Generate the PDF content with error handling
        try {
          this.generateHeader(options);
          this.generateResultsTable(results, options);
          this.generateFooter(options);
        } catch (error) {
          reject(new Error(`Failed to generate PDF content: ${error.message}`));
          return;
        }

        this.doc.end();
      } catch (error) {
        reject(new Error(`PDF initialization error: ${error.message}`));
      }
    });
  }

  // Generate PDF header
  generateHeader(options) {
    const labInfo = options.labInfo || {};
    
    // Logo/Title area
    this.doc
      .fontSize(20)
      .font('Helvetica-Bold')
      .text('LABORATORY RESULTS REPORT', 50, 50);
    
    // Lab information
    this.doc
      .fontSize(10)
      .font('Helvetica')
      .text(labInfo.name || 'Labor Results System', 50, 80)
      .text(labInfo.street || 'Medical Center Street 1', 50, 95)
      .text(`${labInfo.zipCode || '12345'} ${labInfo.city || 'Medical City'}`, 50, 110)
      .text(`Tel: ${labInfo.phone || '+49-123-456789'}`, 50, 125)
      .text(`Email: ${labInfo.email || 'info@laborresults.de'}`, 50, 140);

    // Report information
    const reportDate = new Date().toLocaleDateString('de-DE');
    const reportTime = new Date().toLocaleTimeString('de-DE');
    
    this.doc
      .text(`Report Date: ${reportDate}`, 400, 80)
      .text(`Report Time: ${reportTime}`, 400, 95)
      .text(`Generated by: Labor Results System`, 400, 110);

    // Draw a line
    this.doc
      .moveTo(50, 170)
      .lineTo(550, 170)
      .stroke();
  }

  // Generate results table
  generateResultsTable(results, options) {
    let currentY = 200;

    // Group results by patient
    const patientGroups = this.groupResultsByPatient(results);

    Object.keys(patientGroups).forEach((patientName, patientIndex) => {
      const patientResults = patientGroups[patientName];
      
      // Check if we need a new page
      if (currentY > 700) {
        this.doc.addPage();
        currentY = 50;
      }

      // Patient header
      this.doc
        .fontSize(14)
        .font('Helvetica-Bold')
        .text(`Patient: ${patientName}`, 50, currentY);
      
      currentY += 25;

      // Patient details from first result
      const firstResult = patientResults[0];
      this.doc
        .fontSize(10)
        .font('Helvetica')
        .text(`BSNR: ${firstResult.bsnr}`, 50, currentY)
        .text(`LANR: ${firstResult.lanr}`, 200, currentY);
      
      currentY += 20;

      // Table headers
      this.doc
        .fontSize(10)
        .font('Helvetica-Bold')
        .text('Result ID', 50, currentY)
        .text('Date', 130, currentY)
        .text('Test Type', 200, currentY)
        .text('Status', 300, currentY)
        .text('Value', 380, currentY)
        .text('Reference', 450, currentY);

      currentY += 15;

      // Draw header line
      this.doc
        .moveTo(50, currentY)
        .lineTo(550, currentY)
        .stroke();

      currentY += 10;

      // Table rows
      patientResults.forEach((result, index) => {
        // Check if we need a new page
        if (currentY > 750) {
          this.doc.addPage();
          currentY = 50;
          
          // Repeat headers on new page
          this.doc
            .fontSize(10)
            .font('Helvetica-Bold')
            .text('Result ID', 50, currentY)
            .text('Date', 130, currentY)
            .text('Test Type', 200, currentY)
            .text('Status', 300, currentY)
            .text('Value', 380, currentY)
            .text('Reference', 450, currentY);
          
          currentY += 15;
          this.doc
            .moveTo(50, currentY)
            .lineTo(550, currentY)
            .stroke();
          currentY += 10;
        }

        const date = new Date(result.date).toLocaleDateString('de-DE');
        const value = this.generateMockValue(result.type);
        const reference = this.getMockReferenceRange(result.type);

        // Alternate row background
        if (index % 2 === 0) {
          this.doc
            .rect(50, currentY - 5, 500, 15)
            .fill('#f8f9fa')
            .fill('#000000'); // Reset to black
        }

        this.doc
          .fontSize(9)
          .font('Helvetica')
          .text(result.id, 50, currentY)
          .text(date, 130, currentY)
          .text(result.type, 200, currentY);

        // Status with color
        const statusColor = result.status === 'Final' ? '#10b981' : '#f59e0b';
        this.doc
          .fillColor(statusColor)
          .text(result.status, 300, currentY)
          .fillColor('#000000'); // Reset to black

        this.doc
          .text(value, 380, currentY)
          .text(reference, 450, currentY);

        currentY += 20;
      });

      currentY += 30; // Space between patients
    });

    // Summary section
    currentY += 20;
    
    if (currentY > 700) {
      this.doc.addPage();
      currentY = 50;
    }

    this.doc
      .fontSize(12)
      .font('Helvetica-Bold')
      .text('SUMMARY', 50, currentY);

    currentY += 20;

    const totalResults = results.length;
    const finalResults = results.filter(r => r.status === 'Final').length;
    const preliminaryResults = results.filter(r => r.status === 'Preliminary').length;
    const uniquePatients = Object.keys(this.groupResultsByPatient(results)).length;

    this.doc
      .fontSize(10)
      .font('Helvetica')
      .text(`Total Results: ${totalResults}`, 50, currentY)
      .text(`Final Results: ${finalResults}`, 200, currentY)
      .text(`Preliminary Results: ${preliminaryResults}`, 350, currentY);

    currentY += 15;

    this.doc
      .text(`Unique Patients: ${uniquePatients}`, 50, currentY);
  }

  // Generate footer
  generateFooter(options) {
    const pageCount = this.doc.bufferedPageRange().count;
    
    for (let i = 0; i < pageCount; i++) {
      this.doc.switchToPage(i);
      
      // Footer line
      this.doc
        .moveTo(50, 750)
        .lineTo(550, 750)
        .stroke();

      // Footer text
      this.doc
        .fontSize(8)
        .font('Helvetica')
        .text('This report was generated automatically by Labor Results System', 50, 760)
        .text(`Page ${i + 1} of ${pageCount}`, 450, 760)
        .text('Confidential - For authorized personnel only', 50, 775);
    }
  }

  // Helper function to group results by patient
  groupResultsByPatient(results) {
    return results.reduce((groups, result) => {
      const patient = result.patient;
      if (!groups[patient]) {
        groups[patient] = [];
      }
      groups[patient].push(result);
      return groups;
    }, {});
  }

  // Generate mock test values (same as LDT generator)
  generateMockValue(testType) {
    const mockValues = {
      'Blood Count': '4.5 × 10⁶/μL',
      'Urinalysis': 'Normal',
      'Microbiology': 'No growth'
    };
    return mockValues[testType] || 'Normal';
  }

  // Get mock reference ranges (same as LDT generator)
  getMockReferenceRange(testType) {
    const mockRanges = {
      'Blood Count': '4.0-5.5 × 10⁶/μL',
      'Urinalysis': 'Normal values',
      'Microbiology': 'No growth expected'
    };
    return mockRanges[testType] || 'Normal range';
  }
}

module.exports = PDFGenerator;