generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(uuid())
  email              String   @unique
  password           String
  firstName          String
  lastName           String
  role               String
  bsnr               String?
  lanr               String?
  isActive           Boolean  @default(true)
  isTwoFactorEnabled Boolean  @default(false)
  twoFactorSecret    String?
  backupCodes        String[] // Array of backup codes for 2FA recovery
  mustSetup2FA       Boolean  @default(true) // Force 2FA setup on first login
  passwordResetToken String?
  passwordResetExpires DateTime?
  activationToken    String?
  activationExpires  DateTime?
  isEmailVerified    Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  lastLogin          DateTime?
  createdBy          String? // Admin who created this user
  
  // Relations
  auditLogs          AuditLog[]
  sessions           UserSession[]

  // Indexes for performance
  @@index([email])
  @@index([bsnr])
  @@index([lanr])
  @@index([bsnr, lanr])
  @@index([role])
  @@index([isActive])
  @@index([createdAt])
  @@index([lastLogin])
}

model UserSession {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  userAgent String?
  ipAddress String?
  createdAt DateTime @default(now())
  expiresAt DateTime
  isActive  Boolean  @default(true)
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes for performance
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@index([isActive])
  @@index([createdAt])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String   // LOGIN, LOGOUT, USER_CREATED, ROLE_CHANGED, etc.
  details   Json?    // Additional details about the action
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Indexes for performance
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@index([ipAddress])
}