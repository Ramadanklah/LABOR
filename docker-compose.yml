version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: laborresults_db_dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-laborresults_dev}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./scripts:/scripts
    ports:
      - "5432:5432"
    networks:
      - laborresults_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-laborresults_dev}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: >
      postgres
      -c max_connections=50
      -c shared_buffers=128MB
      -c effective_cache_size=512MB
      -c maintenance_work_mem=32MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=2MB
      -c min_wal_size=512MB
      -c max_wal_size=2GB
      -c max_worker_processes=4
      -c max_parallel_workers_per_gather=2
      -c max_parallel_workers=4
      -c max_parallel_maintenance_workers=2

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: laborresults_redis_dev
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 32mb
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - laborresults_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node.js Application (Development)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: laborresults_app_dev
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-laborresults_dev}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-dev-secret-key}
      FRONTEND_URL: http://localhost:3000
      LOG_LEVEL: debug
    volumes:
      - ./server:/app/server
      - ./client:/app/client
      - /app/server/node_modules
      - /app/client/node_modules
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "5000:5000"
      - "3000:3000"
    networks:
      - laborresults_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: >
      sh -c "
        cd /app/server && npm install &&
        cd /app/client && npm install &&
        cd /app/server && npm run dev &
        cd /app/client && npm run dev
      "

  # Frontend Development Server
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    container_name: laborresults_frontend_dev
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:5000
      NODE_ENV: development
    volumes:
      - ./client:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - laborresults_network
    depends_on:
      - app

  # Database Management Tool
  adminer:
    image: adminer:latest
    container_name: laborresults_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - laborresults_network
    depends_on:
      - postgres

  # Redis Management Tool
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: laborresults_redis_commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - laborresults_network
    depends_on:
      - redis

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: laborresults_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - laborresults_network

  grafana:
    image: grafana/grafana:latest
    container_name: laborresults_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - laborresults_network
    depends_on:
      - prometheus

  # Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: laborresults_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - laborresults_network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: laborresults_kibana
    restart: unless-stopped
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - laborresults_network
    depends_on:
      - elasticsearch

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: laborresults_filebeat
    restart: unless-stopped
    volumes:
      - ./logs:/var/log/app
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
    networks:
      - laborresults_network
    depends_on:
      - elasticsearch

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  laborresults_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16